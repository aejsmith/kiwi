#
# Copyright (C) 2009-2022 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

Import('manager', 'config')

env = manager.Create(libraries = ['kernel'], flags = {
    'LINKFLAGS': ['-nodefaultlibs'],
    'CPPDEFINES': {
        # We use some private libkernel interfaces.
        '__KERNEL_PRIVATE': None,
    },
    'CPPPATH': [
        Dir('.'),
        Dir('include'),
        Dir('arch/%s/include' % (config['ARCH'])),
    ],
})

sources = [File(f) for f in [
    'core/ipc.c',
    'core/log.c',
    'core/mutex.c',
    'core/path.c',
    'core/service.c',

    'dirent/alphasort.c',
    'dirent/closedir.c',
    'dirent/opendir.c',
    'dirent/readdir.c',
    'dirent/rewinddir.c',
    'dirent/scandir.c',

    'locale/localeconv.c',
    'locale/setlocale.c',

    'net/socket.c',

    'posix/alarm.c',
    'posix/exec.c',
    'posix/fd.c',
    'posix/fs.c',
    'posix/getopt.c',
    'posix/io.c',
    'posix/mman.c',
    'posix/pipe.c',
    'posix/poll.c',
    'posix/posix.c',
    'posix/process.c',
    'posix/pwd.c',
    'posix/signal.c',
    'posix/termios.c',
    'posix/time.c',
    'posix/uidgid.c',

    'pthread/cond.c',
    'pthread/mutex.c',
    'pthread/once.c',
    'pthread/pthread.c',
    'pthread/specific.c',

    'stdio/buffer.c',
    'stdio/do_printf.c',
    'stdio/do_scanf.c',
    'stdio/fclose.c',
    'stdio/fflush.c',
    'stdio/fgetc.c',
    'stdio/fgets.c',
    'stdio/fopen.c',
    'stdio/fputc.c',
    'stdio/fputs.c',
    'stdio/fread.c',
    'stdio/fseek.c',
    'stdio/fstatus.c',
    'stdio/fwrite.c',
    'stdio/perror.c',
    'stdio/remove.c',
    'stdio/rename.c',
    'stdio/tmpfile.c',
    'stdio/vfprintf.c',
    'stdio/vfscanf.c',
    'stdio/vsnprintf.c',
    'stdio/vsscanf.c',

    'stdlib/abort.c',
    'stdlib/abs.c',
    'stdlib/atoi.c',
    'stdlib/bsearch.c',
    'stdlib/environ.c',
    'stdlib/exit.c',
    'stdlib/ldiv.c',
    'stdlib/malloc.c',
    'stdlib/mkstemp.c',
    'stdlib/multibyte.c',
    'stdlib/qsort.c',
    'stdlib/rand.c',
    'stdlib/strtod.c',
    'stdlib/strtoul.c',
    'stdlib/system.c',

    'string/ffs.c',
    'string/memchr.c',
    'string/memcmp.c',
    'string/memcpy.c',
    'string/memmove.c',
    'string/memset.c',
    'string/strcasecmp.c',
    'string/strcat.c',
    'string/strchr.c',
    'string/strcmp.c',
    'string/strcpy.c',
    'string/strcspn.c',
    'string/strdup.c',
    'string/strerror.c',
    'string/strlen.c',
    'string/strpbrk.c',
    'string/strsep.c',
    'string/strstr.c',
    'string/strtok.c',

    'time/asctime.c',
    'time/gmtime.c',
    'time/localtime.c',
    'time/mktime.c',
    'time/strftime.c',
    'time/time.c',

    'ctype.c',
    'errno.c',
    'error_list.c',
    'fatal.c',
    'init.c',
    'sched.c',
]]

musl_sources = [File(f) for f in [
    'musl/src/network/inet_addr.c',
    'musl/src/network/inet_aton.c',
    'musl/src/network/inet_ntoa.c',
    'musl/src/network/inet_ntop.c',
    'musl/src/network/inet_pton.c',
]]

musl_CPPPATH = [
    Dir('musl/src/internal'),
    Dir('musl/src/include'),
] + env['CPPPATH']

musl_CCFLAGS = env['CCFLAGS'] + [
    '-Wno-sign-compare',
]

musl_objects = [env.SharedObject(f, CPPPATH = musl_CPPPATH, CCFLAGS = musl_CCFLAGS) for f in musl_sources]

# Generate the error string list.
env.Command(
    'error_list.c',
    ['include/errno.h'],
    Action('$GENERRLIST $SOURCE __errno_list __errno_count > $TARGET', '$GENCOMSTR')
)

# Get a list of architecture-specific source files.
arch_sources = SConscript(dirs = ['arch/' + config['ARCH']], exports = ['env'])

# Build the library from this.
env.KiwiLibrary('system',
    sources = arch_sources + sources + musl_objects,
    build_libraries = ['kernel'],
    include_paths = [
        Dir('include'),
        Dir('arch/%s/include' % (config['ARCH'])),
    ],
)
