/*
 * SPDX-FileCopyrightText: (C) Alex Smith <alex@alex-smith.me.uk>
 * SPDX-License-Identifier: ISC
 */


/**
 * @file
 * @brief               POSIX signal functions.
 */

#pragma once

#include <kernel/context.h>

#include <sys/types.h>

__SYS_EXTERN_C_BEGIN

/**
 * Kernel IPL that POSIX signals are raised with. While a signal handler is
 * executing, the handling thread's IPL is raised to 1 above this.
 */
#define POSIX_SIGNAL_IPL    8

/**
 * Signal number definitions. Values of default action:
 *  - A: Abnormal termination with core dump.
 *  - T: Abnormal termination.
 *  - I: Ignore.
 *  - S: Stop the process.
 *  - C: Continue the process.
 */
#define SIGHUP          1           /**< Hangup (T). */
#define SIGINT          2           /**< Terminal interrupt signal (T). */
#define SIGQUIT         3           /**< Terminal quit signal (A). */
#define SIGILL          4           /**< Illegal instruction (A). */
#define SIGTRAP         5           /**< Trace trap (A). */
#define SIGABRT         6           /**< Process abort signal (A). */
#define SIGBUS          7           /**< Access to undefined portion of memory object (A). */
#define SIGFPE          8           /**< Erroneous arithmetic operation (A). */
#define SIGKILL         9           /**< Kill (cannot be caught or ignored) (T). */
#define SIGCHLD         10          /**< Child process terminated, stopped or continued (I). */
#define SIGSEGV         11          /**< Invalid memory reference (A). */
#define SIGSTOP         12          /**< Stop executing (cannot be caught or ignored) (S). */
#define SIGPIPE         13          /**< Write on a pipe with nobody to read it (T). */
#define SIGALRM         14          /**< Alarm clock (T). */
#define SIGTERM         15          /**< Termination signal (T). */
#define SIGUSR1         16          /**< User-defined signal 1 (T). */
#define SIGUSR2         17          /**< User-defined signal 2 (T). */
#define SIGCONT         18          /**< Continue execution, if stopped (C). */
#define SIGURG          19          /**< High bandwidth data is available at socket (I). */
#define SIGTSTP         20          /**< Terminal stop signal (S). */
#define SIGTTIN         21          /**< Background process attempting to read (S). */
#define SIGTTOU         22          /**< Background process attempting to write (S). */
#define SIGWINCH        23          /**< Window size change (I). */
#define NSIG            24          /**< Highest signal number. */

/** Signal bitmap type. Must be big enough to hold a bit for each signal. */
typedef uint32_t sigset_t;

/** Type atomically accessible through asynchronous signal handlers. */
typedef volatile int sig_atomic_t;

/** Signal stack information structure. */
typedef struct stack {
    void *ss_sp;                    /**< Stack base or pointer. */
    size_t ss_size;                 /**< Stack size. */
    int ss_flags;                   /**< Flags. */
} stack_t;

/** Signal stack flags. */
#define SS_DISABLE      (1<<0)      /**< The stack is currently disabled. */

/** Structure describing previous machine context on a signal. */
typedef cpu_context_t mcontext_t;

/** Structure containing a saved context. */
typedef struct ucontext {
    struct ucontext *uc_link;       /**< Unused. */
    sigset_t uc_sigmask;            /**< Signals masked when this context is active. */
    stack_t uc_stack;               /**< Stack used by this context. */
    mcontext_t uc_mcontext;         /**< Machine-specific saved context. */
} ucontext_t;

/** Signal information structure passed to a signal handler. */
typedef struct siginfo {
    int si_signo;                   /**< Signal number. */
    int si_code;                    /**< Signal code. */
    int si_errno;                   /**< If non-zero, an errno value associated with this signal. */
    pid_t si_pid;                   /**< Sending process ID. */
    uid_t si_uid;                   /**< Real user ID of sending process. */
    void *si_addr;                  /**< Address of faulting instruction. */
    int si_status;                  /**< Exit value or signal. */
} siginfo_t;

/** Values for siginfo.si_code for any signal. */
#define SI_USER         1           /**< Signal sent by kill(). */
#define SI_QUEUE        2           /**< Signal sent by sigqueue(). */
#define SI_TIMER        3           /**< Signal generated by expiration of a timer set by timer_settime(). */
#define SI_ASYNCIO      4           /**< Signal generated by completion of an asynchronous I/O request. */
#define SI_MESGQ        5           /**< Signal generated by arrival of a message on an empty message queue. */

/** Values for siginfo.si_code for SIGILL. */
#define ILL_ILLOPC      10          /**< Illegal opcode. */
#define ILL_ILLOPN      11          /**< Illegal operand. */
#define ILL_ILLADR      12          /**< Illegal addressing mode. */
#define ILL_ILLTRP      13          /**< Illegal trap. */
#define ILL_PRVOPC      14          /**< Privileged opcode. */
#define ILL_PRVREG      15          /**< Privileged register. */
#define ILL_COPROC      16          /**< Coprocessor error. */
#define ILL_BADSTK      17          /**< Internal stack error. */

/** Values for siginfo.si_code for SIGFPE. */
#define FPE_INTDIV      20          /**< Integer divide by zero. */
#define FPE_INTOVF      21          /**< Integer overflow. */
#define FPE_FLTDIV      22          /**< Floating-point divide by zero. */
#define FPE_FLTOVF      23          /**< Floating-point overflow. */
#define FPE_FLTUND      24          /**< Floating-point underflow. */
#define FPE_FLTRES      25          /**< Floating-point inexact result. */
#define FPE_FLTINV      26          /**< Invalid floating-point operation. */
#define FPE_FLTSUB      27          /**< Subscript out of range. */

/** Values for siginfo.si_code for SIGSEGV. */
#define SEGV_MAPERR     30          /**< Address not mapped to object. */
#define SEGV_ACCERR     31          /**< Invalid permissions for mapped object. */

/** Values for siginfo.si_code for SIGBUS. */
#define BUS_ADRALN      40          /**< Invalid address alignment. */
#define BUS_ADRERR      41          /**< Nonexistent physical address. */
#define BUS_OBJERR      42          /**< Object-specific hardware error. */

/** Values for siginfo.si_code for SIGTRAP. */
#define TRAP_BRKPT      50          /**< Process breakpoint. */
#define TRAP_TRACE      51          /**< Process trace trap. */

/** Values for siginfo.si_code for SIGCHLD. */
#define CLD_EXITED      60          /**< Child has exited. */
#define CLD_KILLED      61          /**< Child has terminated abnormally and did not create a core file. */
#define CLD_DUMPED      62          /**< Child has terminated abnormally and created a core file. */
#define CLD_TRAPPED     63          /**< Traced child has trapped. */
#define CLD_STOPPED     64          /**< Child has stopped. */
#define CLD_CONTINUED   65          /**< Stopped child has continued. */

/** Structure describing how to handle a signal. */
typedef struct sigaction {
    /** Handler function pointers, or one of the above special values. */
    union {
        /** Old style signal-handler. */
        void (*sa_handler)(int);

        /** Extended signal handler for if SA_SIGINFO is set. */
        void (*sa_sigaction)(int, siginfo_t *, void *);
    };

    sigset_t sa_mask;               /**< Bitmap of signals to block during handler execution. */
    int sa_flags;                   /**< Flags controlling signal behaviour. */
} sigaction_t;

/** Type of a signal handler. */
typedef void (*sighandler_t)(int);

/** Special signal handler values. */
#define SIG_DFL         ((void (*)(int))0)
#define SIG_IGN         ((void (*)(int))1)

/** Signal action flags. */
#define SA_NOCLDSTOP    (1<<0)      /**< SIGCHLD won't be generated when child stops or continues. */
#define SA_ONSTACK      (1<<1)      /**< Execute on alternate stack. */
#define SA_RESETHAND    (1<<2)      /**< Reset signal to SIG_DFL on entry to signal handler. */
#define SA_RESTART      (1<<3)      /**< Make certain system calls restartable if interrupted. */
#define SA_SIGINFO      (1<<4)      /**< Pass extra information to signal handler. */
#define SA_NOCLDWAIT    (1<<5)      /**< Don't create zombie processes on child death (SIGCHLD only). */
#define SA_NODEFER      (1<<6)      /**< Signal won't be blocked on entry to signal handler. */

/** Actions for sigprocmask(). */
#define SIG_BLOCK       1           /**< Block all signals set in the provided mask. */
#define SIG_SETMASK     2           /**< Replace current mask with provided mask. */
#define SIG_UNBLOCK     3           /**< Unblock all signals set in the provided mask. */

/** Value returned from signal() on error. */
#define SIG_ERR         ((void (*)(int))-1)

extern const char *const sys_siglist[];

extern int kill(pid_t pid, int num);
/* int killpg(pid_t, int); */
extern void psignal(int sig, const char *s);
extern void psiginfo(const siginfo_t *info, const char *s);
/* int pthread_kill(pthread_t, int); */
/* int pthread_sigmask(int, const sigset_t *, sigset_t *); */
extern int raise(int num);
extern int sigaction(int num, const sigaction_t *__restrict act, sigaction_t *__restrict old_act);
extern int sigaltstack(const stack_t *__restrict ss, stack_t *__restrict old_ss);
extern int sigaddset(sigset_t *set, int num);
extern int sigdelset(sigset_t *set, int num);
extern int sigemptyset(sigset_t *set);
extern int sigfillset(sigset_t *set);
/* int sighold(int); */
/* int sigignore(int); */
/* int siginterrupt(int, int); */
extern int sigismember(const sigset_t *set, int num);
extern sighandler_t signal(int num, sighandler_t handler);
/* int sigpause(int); */
/* int sigpending(sigset_t *); */
extern int sigprocmask(int how, const sigset_t *__restrict set, sigset_t *__restrict old_set);
extern int sigsuspend(const sigset_t *mask);
/* int sigwait(const sigset_t *, int *); */

__SYS_EXTERN_C_END
