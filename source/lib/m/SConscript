#
# Copyright (C) 2009-2023 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

Import('manager', 'config')

if config['ARCH'] == 'amd64':
    musl_arch = 'x86_64'
else:
    raise Exception('Unsupported architecture')

env = manager.create(flags = {
    'CPPPATH': [
        Dir('include'),
        Dir('musl/arch/generic'),
        Dir('musl/arch/%s' % (musl_arch)),
        Dir('musl/src/internal'),
        Dir('musl/src/include'),
    ],
    'CCFLAGS': [
        '-Wno-shift-op-parentheses',
        '-Wno-unused-but-set-variable',
    ],
    'ASFLAGS': [
        '-Wno-unused-command-line-argument',
    ],
    'LINKFLAGS': [
        # Saves us adding GNU-stack sections to musl sources.
        '-Wl,-z,noexecstack',
    ]
})

# Make sure that architecture-specific versions of functions will get used in
# preference to the generic versions.
class SourceList:
    def __init__(self):
        self.sources = {}
    def __add__(self, sources):
        for s in sources:
            base = s.name.rsplit('.', 1)[0]
            if base not in self.sources:
                self.sources[base] = s
        return self
    def files(self):
        return list(self.sources.values())

# Get a list of source files. Architecture sources must be first because of the
# way the above class works.
math_sources = SourceList()
math_sources += Glob('musl/src/math/%s/*.[csS]' % (musl_arch))
math_sources += Glob('musl/src/math/*.c')

complex_sources = SourceList()
complex_sources += Glob('musl/src/complex/*.c')

fenv_sources = SourceList()
fenv_sources += Glob('musl/src/fenv/%s/*.[csS]' % (musl_arch))
fenv_sources += Glob('musl/src/fenv/*.c')

# Build the library.
env.KiwiLibrary('m',
    sources = math_sources.files() + complex_sources.files() + fenv_sources.files(),
    include_paths = [
        Dir('include'),
        Dir('arch/%s' % (musl_arch)),
    ],
)
