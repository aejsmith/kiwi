#
# Copyright (C) 2009-2020 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

import os
import util

Import('manager', 'config')

env = manager.Create(flags = {
    'LINKFLAGS': ['-nostdlib', '-Wl,-e,libkernel_start', '-Wl,-Bsymbolic'],

    # The default visibility is set to hidden, as the majority of functions in
    # this library should not be exported.
    'CCFLAGS': ['-ffreestanding', '-fvisibility=hidden'],

    'CPPDEFINES': {
        '__LIBKERNEL': None,
        '__KERNEL_PRIVATE': None,
    },

    'CPPPATH': [
        Dir('.'),
        Dir('arch/%s' % (config['ARCH'])),
        Dir('include'),
        Dir('../system/include'),
        Dir('../system/arch/%s/include' % (config['ARCH'])),
    ],
})

sources = [File(f) for f in [
    'rtld/image.c',
    'rtld/symbol.c',

    'lib/heap.c',
    'lib/printf.c',
    'lib/string.c',

    'fs.c',
    'init.c',
    'process.c',
    'status_list.c',
    'syscalls.S',
    'thread.c',
    'tls.c',
]]

# Required libsystem sources. libkernel cannot depend on libsystem but we want
# a few utility functions from it. Unlike libsystem, we default to all symbols
# being hidden, therefore these functions will not actually be exported from
# libkernel.
libsystem_objects = [util.Copy(env, 'lib/%s' % (os.path.basename(f)), f) for f in [
    '../system/core/mutex.c',
]]

# Generate the system call functions.
env.Syscalls('syscalls.S', manager['kernel']['SYSCALLS'])

# Generate the status string list.
env.Command(
    'status_list.c',
    ['include/kernel/status.h'],
    Action('$GENERRLIST $SOURCE __kern_status_strings __kern_status_size > $TARGET', '$GENCOMSTR'))

# Get a list of architecture-specific source files.
arch_sources = SConscript(dirs = ['arch/%s' % (config['ARCH'])], exports = ['env'])

env.KiwiLibrary('kernel',
    sources = arch_sources + sources + libsystem_objects,
    include_paths = [Dir('include')],
)
