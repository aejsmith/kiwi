#
# Copyright (C) 2009-2020 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

Import('config', 'manager', 'version')

# Generate the configuration header. We don't generate with Kconfig because its
# too much of a pain to get SCons to do it properly.
f = open('config.h', 'w')
f.write('/* This file is automatically-generated, do not edit. */\n\n')
for (k, v) in config.items():
    if isinstance(v, str):
        f.write("#define CONFIG_%s \"%s\"\n" % (k, v))
    elif isinstance(v, bool) or isinstance(v, int):
        f.write("#define CONFIG_%s %d\n" % (k, int(v)))
    else:
        raise Exception("Unsupported type %s in config" % (type(v)))
f.close()

dist = manager['dist']

#################
# Kernel build. #
#################

# Build the kernel.
SConscript(dirs = ['kernel'])

################
# KBoot build. #
################

# Determine available KBoot configurations.
kboot_configs = SConscript('../../3rdparty/kboot/config/SConscript')

dist['KBOOT'] = []

# Build all required configurations.
for kboot_target in config['KBOOT_TARGETS'].split(','):
    # Get the configuration.
    kboot_config = kboot_configs[kboot_target]['config']

    # Set the debug flag.
    if config['DEBUG']:
        kboot_config['DEBUG'] = True

    # Create a build environment.
    kboot_env = manager.CreateBare(
        flags = {
            'LIBS': [],
            'CCFLAGS': [
                '-nostdlib', '-nostdinc', '-ffreestanding', '-fno-stack-protector',
                '-fno-optimize-sibling-calls',
            ],
            'ASFLAGS': ['-nostdinc'],
            'LINKFLAGS': ['-nostdlib'],

            # Variables required by the KBoot build system.
            'CONFIG': kboot_target,
            'OUTDIR': Dir('boot/bin/%s' % (kboot_target)),
            'VERSION': 'kiwi-%s' % (version['KIWI_VER_STRING']),
        }
    )

    # Override any optimisation level specified, we want to optimise for size.
    kboot_env['CCFLAGS'] = [f for f in kboot_env['CCFLAGS'] if f[0:2] != '-O'] + ['-Os']

    # Add the compiler include directory for some standard headers.
    from subprocess import Popen, PIPE
    incdir = Popen([kboot_env['CC'], '-print-file-name=include'], stdout = PIPE).communicate()[0].strip().decode('utf-8')
    kboot_env['CCFLAGS'] += ['-isystem%s' % (incdir)]
    kboot_env['ASFLAGS'] += ['-isystem%s' % (incdir)]

    # Build the boot loader. Have to set the source directory explicitly to the
    # directory in the real source tree, otherwise SCons gets upset.
    VariantDir('boot/%s' % (kboot_target), '#source/boot')
    SConscript(
        'boot/%s/SConscript' % (kboot_target),
        exports = {'env': kboot_env, 'config': kboot_config})

    # Add all output binaries to the distribution environment.
    dist['KBOOT'] += kboot_env.Glob('${OUTDIR}/*')

####################
# Userspace build. #
####################

# Build userspace.
SConscript(dirs = ['lib', 'services', 'bin'])

###############
# Image build #
###############

# Always build the filesystem image to make sure new stuff is copied into it.
fsimage = dist.FSImage('fsimage.tar', [])
AlwaysBuild(fsimage)

# Add aliases and set the default target.
Alias('kernel', dist['KERNEL'])
Alias('modules', dist['MODULES'])
Alias('fsimage', fsimage)
Alias('kboot', dist['KBOOT'])

# Add platform-specific targets to generate bootable images.
if config['PLATFORM'] == 'pc':
    Default(Alias('cdrom', dist.ISOImage('cdrom.iso', fsimage)))

    # Target to run in QEMU.
    Alias('qemu', dist.Command('__qemu', ['cdrom.iso'], Action(
        config['QEMU_BINARY'] + ' -cdrom $SOURCE -boot d ' + config['QEMU_OPTS'],
        None)))
else:
    Default(dist['KERNEL'])
    Default(dist['KBOOT'])

# Helper to run GDB attached to QEMU with the appropriate options for the
# current configuration.
Alias('qgdb', dist.Command('__qgdb', [], Action(
    'gdb --eval-command="symbol-file %s" --eval-command="set architecture %s" --eval-command="target remote localhost:1234"' %
        ('build/%s-%s-%s/kernel/kernel-unstripped' % (config['ARCH'], config['PLATFORM'], config['BUILD']), config['GDB_ARCH']),
    None)))
