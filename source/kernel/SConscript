#
# Copyright (C) 2009-2020 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

Import('config', 'manager', 'version')
from util import FeatureSources, FeatureDirs

sources = FeatureSources(config, [
    'console/console.c',
    'console/fb.c',
    'console/font.c',
    'console/logo.c',

    'device/class.c',
    'device/device.c',
    'device/io.c',
    'device/irq.c',

    'io/context.c',
    'io/file.c',
    'io/fs.c',
    'io/memory_file.c',
    'io/ramfs.c',
    'io/request.c',
    'io/user_file.c',

    'ipc/ipc.c',
    'ipc/pipe.c',

    'lib/ansi_parser.c',
    'lib/avl_tree.c',
    'lib/bitmap.c',
    'lib/fixed_heap.c',
    'lib/id_allocator.c',
    'lib/notifier.c',
    'lib/printf.c',
    'lib/qsort.c',
    'lib/radix_tree.c',
    'lib/string.c',
    'lib/tar.c',

    'mm/kmem.c',
    'mm/malloc.c',
    'mm/mmu.c',
    'mm/page.c',
    'mm/phys.c',
    'mm/safe.c',
    'mm/slab.c',
    'mm/vm.c',
    'mm/vm_cache.c',

    'proc/process.c',
    'proc/sched.c',
    'proc/thread.c',

    'security/token.c',

    'sync/condvar.c',
    'sync/futex.c',
    'sync/mutex.c',
    'sync/rwlock.c',
    'sync/semaphore.c',
    'sync/spinlock.c',

    'cpu.c',
    'elf.c',
    'fatal.c',
    'info.c',
    'init.c',
    'kdb.c',
    'log.c',
    'module.c',
    'object.c',
    'shutdown.c',
    'smp.c',
    'syscall_table.c',
    'time.c',
    'version.c',
])

module_dirs = FeatureDirs(config, [
    'device/input',
])

# Create the kernel environment.
env = manager.CreateBare(name = 'kernel', flags = {
    'LIBS': [],
    'CPPPATH': [
        Dir('include'),
        Dir('arch/%s/include' % (config['ARCH'])),
        Dir('platform/%s/include' % (config['PLATFORM'])),
    ],
    'CCFLAGS': [
        '-nostdlib', '-nostdinc', '-ffreestanding',
        '-fno-optimize-sibling-calls', '-fno-stack-protector',
        '-include', 'build/%s-%s-%s/config.h' % (config['ARCH'], config['PLATFORM'], config['BUILD']),
    ],
    'CXXFLAGS': [
        '-fno-exceptions', '-fno-rtti',
    ],
    'ASFLAGS': [
        '-nostdinc', '-include',
        'build/%s-%s-%s/config.h' % (config['ARCH'], config['PLATFORM'], config['BUILD']),
    ],
    'LINKFLAGS': [
        '-nostdlib',
    ],
    'CPPDEFINES': {
        '__KERNEL': None,
        '__KERNEL_PRIVATE': None,
    },
})

# Add the compiler include directory for some standard headers.
from subprocess import Popen, PIPE
incdir = Popen([env['CC'], '-print-file-name=include'], stdout = PIPE).communicate()[0].strip().decode('utf-8')
env['CCFLAGS'] += ['-isystem', incdir]
env['ASFLAGS'] += ['-isystem', incdir]

# Generate the version information file.
def gen_version_c(target, source, env):
    f = open(str(target[0]), 'w')
    f.write('int kiwi_ver_release = %d;\n' % (version['KIWI_VER_RELEASE']))
    f.write('int kiwi_ver_update = %d;\n' % (version['KIWI_VER_UPDATE']))
    f.write('int kiwi_ver_revision = %d;\n' % (version['KIWI_VER_REVISION']))
    f.write('const char *kiwi_ver_string = "%s";\n' % (version['KIWI_VER_STRING']))
    f.close()
AlwaysBuild(env.Command('version.c', [], env.Action(gen_version_c, None)))

# Generate the boot splash image files.
env.Command('console/logo.c', ['console/logo.ppm'],
    Action('$BIN2HEX $SOURCE logo_ppm > $TARGET', '$GENCOMSTR'))

# Generate the system call table.
env['SYSCALLS'] = File('syscalls.def')
env.SyscallTable('syscall_table.c', env['SYSCALLS'], TABLE = 'syscall_table')
env.SyscallHeader('include/syscall_table.h', env['SYSCALLS'], GUARD = '__SYSCALL_TABLE_H')

# Get the list of source files from the architecture/platform.
arch_sources = SConscript(dirs = ['arch/' + config['ARCH']], exports = ['env'])
platform_sources = SConscript(dirs = ['platform/' + config['PLATFORM']], exports = ['env'])
sources = arch_sources + platform_sources + sources

# Link the kernel image.
env.Program(
    'kernel-unstripped',
    [env.Object(f) for f in sources],
    LINKFLAGS = env['LINKFLAGS'] + ['-Wl,-T,$LDSCRIPT'])
Depends('kernel-unstripped', env['LDSCRIPT'])

# Generate various information files and the stripped kernel image.
env.Command(['kernel', 'kernel.lst', 'kernel.rde', 'kernel.sym'], 'kernel-unstripped', [
    Action('$STRIP --strip-debug $SOURCE -o ${TARGETS[0]}', '$GENCOMSTR'),
    Action('$OBJDUMP -d $SOURCE > ${TARGETS[1]}', None),
    Action('$READELF -aW $SOURCE > ${TARGETS[2]}', None),
    Action('$NM -C $SOURCE | sort > ${TARGETS[3]}', None),
])

# Let the distribution environment know where the kernel is.
dist = manager['dist']
dist['KERNEL'] = File('kernel')

# Create the module environment.
module_env = manager.Clone(env, name = 'module', flags = {
    # Modules default to not exporting symbols.
    'CCFLAGS': ['-fno-common', '-fvisibility=hidden'],
})

dist['MODULES'] = []

# The emitter adds all modules to the distribution environment's module list.
def module_emitter(target, source, env):
    manager['dist']['MODULES'].append(target[0])
    return target, source
module_env['BUILDERS']['Module'] = Builder(
    action = [
        Action('$LD -r -o $TARGET $SOURCES', '$LINKCOMSTR'),
        Action('$STRIP --strip-debug $TARGET', None),
    ],
    suffix = '.km',
    src_suffix = '$OBJSUFFIX',
    src_builder = 'Object',
    emitter = module_emitter
)

# Build modules.
env = module_env
SConscript(dirs = module_dirs, exports = ['env'])
