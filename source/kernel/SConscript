#
# Copyright (C) 2009-2022 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

Import('config', 'manager', 'version')
from util import feature_sources, feature_dirs

base_sources = feature_sources(config, [
    'cpu.c',
    'elf.c',
    'fatal.c',
    'info.c',
    'init.c',
    'kdb.c',
    'log.c',
    'module.c',
    'object.c',
    'shutdown.c',
    'smp.c',
    'syscall_table.c',
    'time.c',
    'version.c',
])

dirs = feature_dirs(config, [
    # Architecture must be first as they may change build flags which must
    # apply to all other subdirectories.
    'arch/%s' % (config['ARCH']),

    'console',
    'device',
    'io',
    'lib',
    'mm',
    'net',
    'proc',
    'security',
    'sync',
])

###############
# Build setup #
###############

kern_sources = []

dist_env = manager['dist']
dist_env['MODULES'] = []

# Create the kernel environment.
kern_env = manager.create_bare(name = 'kernel', with_config_h = True, flags = {
    'LIBS': [],
    'CPPPATH': [
        Dir('include'),
        Dir('arch/%s/include' % (config['ARCH'])),
    ],
    'CCFLAGS': [
        '-nostdlib', '-nostdinc', '-ffreestanding',
        '-fno-optimize-sibling-calls', '-fno-stack-protector',
    ],
    'CXXFLAGS': [
        '-fno-exceptions', '-fno-rtti',
    ],
    'ASFLAGS': [
        '-nostdinc',
    ],
    'LINKFLAGS': [
        '-nostdlib', '-Wl,-z,noexecstack', '-Wl,--no-warn-rwx-segments',
    ],
    'CPPDEFINES': {
        '__KERNEL': None,
        '__KERNEL_PRIVATE': None,
    },
})

# Add the compiler include directory for some standard headers.
kern_env['CCFLAGS'] += ['-isystem', kern_env['TOOLCHAIN_INCLUDE']]
kern_env['ASFLAGS'] += ['-isystem', kern_env['TOOLCHAIN_INCLUDE']]

# Create the module environment.
mod_env = manager.clone(kern_env, name = 'module', flags = {
    # Modules default to not exporting symbols.
    'CCFLAGS': ['-fno-common', '-fvisibility=hidden'],
})

# The emitter adds all modules to the distribution environment's module list
# and to the filesystem.
def mod_emitter(target, source, env):
    dist_env['MODULES'].append(target[0])
    dist_env.AddFile(target[0], 'system/kernel/modules/%s' % (target[0].name))
    return target, source
mod_env['BUILDERS']['Module'] = Builder(
    action = [
        Action('$LD -r -o ${TARGET}-unstripped $SOURCES', '$LINKCOMSTR'),
        Action('$STRIP --strip-debug -o $TARGET ${TARGET}-unstripped', None),
    ],
    suffix      = '.km',
    src_suffix  = '$OBJSUFFIX',
    src_builder = 'Object',
    emitter     = mod_emitter)

# Visit subdirectories.
Export('kern_env', 'kern_sources', 'mod_env')
SConscript(dirs = dirs)
kern_sources += base_sources

# Generate the version information file.
def gen_version_c(target, source, env):
    f = open(str(target[0]), 'w')
    f.write('int kiwi_ver_release = %d;\n' % (version['KIWI_VER_RELEASE']))
    f.write('int kiwi_ver_update = %d;\n' % (version['KIWI_VER_UPDATE']))
    f.write('int kiwi_ver_revision = %d;\n' % (version['KIWI_VER_REVISION']))
    f.write('const char *kiwi_ver_string = "%s";\n' % (version['KIWI_VER_STRING']))
    f.close()
AlwaysBuild(kern_env.Command('version.c', [], Action(gen_version_c, None)))

# Generate the system call table.
kern_env['SYSCALLS'] = File('syscalls.def')
kern_env.SyscallTable('syscall_table.c', kern_env['SYSCALLS'], TABLE = 'syscall_table')
kern_env.SyscallHeader('include/syscall_table.h', kern_env['SYSCALLS'], GUARD = '__SYSCALL_TABLE_H')

# Link the kernel image.
kern_env.Program(
    'kernel-unstripped',
    [kern_env.Object(f) for f in kern_sources],
    LINKFLAGS = kern_env['LINKFLAGS'] + ['-Wl,-T,$LDSCRIPT'])
Depends('kernel-unstripped', kern_env['LDSCRIPT'])

# Generate various information files and the stripped kernel image.
kern_env.Command(['kernel', 'kernel.lst', 'kernel.rde', 'kernel.sym'], 'kernel-unstripped', [
    Action('$STRIP --strip-debug $SOURCE -o ${TARGETS[0]}', '$GENCOMSTR'),
    Action('$OBJDUMP -d $SOURCE > ${TARGETS[1]}', None),
    Action('$READELF -aW $SOURCE > ${TARGETS[2]}', None),
    Action('$NM -C $SOURCE | sort > ${TARGETS[3]}', None),
])

# Let the distribution environment know where the kernel is, and add it to the
# filesystem.
dist_env['KERNEL'] = File('kernel')
dist_env.AddFile(dist_env['KERNEL'], 'system/kernel/kernel')

# Add aliases.
Alias('kernel', dist_env['KERNEL'])
Alias('modules', dist_env['MODULES'])
