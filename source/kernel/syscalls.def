#
# Copyright (C) 2009-2022 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

##
# IMPORTANT: System calls must have a non-void return value, with the exception
# of kern_thread_restore() and calls that cannot return (must be marked noreturn
# in the function declaration). This is because architecture system call handler
# code assumes that functions have a return value and will pass the return value
# register back to user mode. If the function return type is void, the compiler
# will likely not initialize the return register and this could leak kernel
# information back to user mode.
##

type status_t int32_t;
type handle_t int32_t;
type process_id_t int32_t;
type thread_id_t int32_t;
type mount_id_t uint16_t;
type node_id_t uint64_t;
type nstime_t int64_t;
type offset_t int64_t;
type user_id_t int16_t;
type group_id_t int16_t;
type image_id_t int16_t;
type socklen_t uint32_t;
type sa_family_t uint16_t;

syscall kern_system_info(uint, ptr_t);
syscall kern_system_shutdown(int);
syscall kern_system_fatal(ptr_t);

syscall kern_module_load(ptr_t, ptr_t);
#syscall kern_module_info(ptr_t, ptr_t);

syscall kern_time_get(uint, ptr_t);
syscall kern_time_set(uint, ptr_t);

syscall kern_object_type(handle_t, ptr_t);
syscall kern_object_wait(ptr_t, size_t, uint32_t, nstime_t);
syscall kern_object_callback(ptr_t, ptr_t, uint);

syscall kern_handle_flags(handle_t, ptr_t);
syscall kern_handle_set_flags(handle_t, uint32_t);
syscall kern_handle_duplicate(handle_t, handle_t, ptr_t);
syscall kern_handle_close(handle_t);

syscall kern_file_reopen(handle_t, uint32_t, uint32_t, ptr_t);
syscall kern_file_read(handle_t, ptr_t, size_t, offset_t, ptr_t);
syscall kern_file_write(handle_t, ptr_t, size_t, offset_t, ptr_t);
syscall kern_file_read_vecs(handle_t, ptr_t, size_t, offset_t, ptr_t);
syscall kern_file_write_vecs(handle_t, ptr_t, size_t, offset_t, ptr_t);
syscall kern_file_read_dir(handle_t, ptr_t, size_t);
syscall kern_file_rewind_dir(handle_t);
syscall kern_file_state(handle_t, ptr_t, ptr_t, ptr_t);
syscall kern_file_set_flags(handle_t, uint32_t);
syscall kern_file_seek(handle_t, uint, offset_t, ptr_t);
syscall kern_file_resize(handle_t, offset_t);
syscall kern_file_info(handle_t, ptr_t);
syscall kern_file_sync(handle_t);
syscall kern_file_request(handle_t, uint, ptr_t, size_t, ptr_t, size_t, ptr_t);

syscall kern_fs_open(ptr_t, uint32_t, uint32_t, uint, ptr_t);
syscall kern_fs_create_dir(ptr_t);
syscall kern_fs_create_pipe(ptr_t);
syscall kern_fs_create_symlink(ptr_t, ptr_t);
syscall kern_fs_read_symlink(ptr_t, ptr_t, size_t);
syscall kern_fs_mount(ptr_t, ptr_t, ptr_t, uint32_t, ptr_t);
syscall kern_fs_mount_info(ptr_t, ptr_t);
syscall kern_fs_unmount(ptr_t, uint);
syscall kern_fs_path(handle_t, ptr_t, size_t);
syscall kern_fs_set_curr_dir(ptr_t);
syscall kern_fs_set_root_dir(ptr_t);
syscall kern_fs_info(ptr_t, bool, ptr_t);
syscall kern_fs_link(ptr_t, ptr_t);
syscall kern_fs_unlink(ptr_t);
syscall kern_fs_rename(ptr_t, ptr_t);
syscall kern_fs_sync();

syscall kern_device_open(ptr_t, uint32_t, uint32_t, ptr_t);
syscall kern_device_attr(handle_t, ptr_t, int, ptr_t, size_t);

syscall kern_vm_map(ptr_t, size_t, size_t, uint32_t, uint32_t, uint32_t, handle_t, offset_t, ptr_t);
syscall kern_vm_unmap(ptr_t, size_t);

syscall kern_token_create(ptr_t, ptr_t);
syscall kern_token_query(handle_t, ptr_t);

syscall kern_process_create(ptr_t, ptr_t, ptr_t, uint32_t, ptr_t, ptr_t);
syscall kern_process_exec(ptr_t, ptr_t, ptr_t, uint32_t, ptr_t);
syscall kern_process_clone(ptr_t) wrapped;
syscall kern_process_open(process_id_t, ptr_t);
syscall kern_process_id(handle_t, ptr_t) wrapped;
syscall kern_process_security(handle_t, ptr_t);
syscall kern_process_port(handle_t, int32_t, ptr_t);
syscall kern_process_status(handle_t, ptr_t, ptr_t);
syscall kern_process_kill(handle_t);
syscall kern_process_token(ptr_t);
syscall kern_process_set_token(handle_t);
syscall kern_process_set_exception_handler(uint, ptr_t);
syscall kern_process_exit(int);
syscall kern_process_control(uint, ptr_t, ptr_t) hidden;

syscall kern_process_group_create(uint32_t, ptr_t);
syscall kern_process_group_add(handle_t, handle_t);
syscall kern_process_group_remove(handle_t, handle_t);
syscall kern_process_group_query(handle_t, handle_t);

syscall kern_thread_create(ptr_t, ptr_t, ptr_t, ptr_t, uint32_t, ptr_t) wrapped;
syscall kern_thread_open(thread_id_t, ptr_t);
syscall kern_thread_id(handle_t, ptr_t) wrapped;
syscall kern_thread_security(handle_t, ptr_t);
syscall kern_thread_status(handle_t, ptr_t, ptr_t);
syscall kern_thread_kill(handle_t);
syscall kern_thread_ipl(ptr_t);
syscall kern_thread_set_ipl(uint);
syscall kern_thread_token(ptr_t);
syscall kern_thread_set_token(handle_t);
syscall kern_thread_set_exception_handler(uint, ptr_t);
syscall kern_thread_set_exception_stack(ptr_t);
syscall kern_thread_raise(ptr_t);
syscall kern_thread_sleep(nstime_t, ptr_t);
syscall kern_thread_exit(int) wrapped;
syscall kern_thread_control(uint, ptr_t, ptr_t) hidden;
syscall kern_thread_restore() hidden;

syscall kern_port_create(ptr_t);
syscall kern_port_listen(handle_t, nstime_t, ptr_t);

syscall kern_connection_open(handle_t, nstime_t, ptr_t);
syscall kern_connection_open_remote(handle_t, ptr_t);
syscall kern_connection_send(handle_t, ptr_t, ptr_t, handle_t, nstime_t);
syscall kern_connection_receive(handle_t, ptr_t, ptr_t, nstime_t);
syscall kern_connection_receive_data(handle_t, ptr_t);
syscall kern_connection_receive_handle(handle_t, ptr_t);

syscall kern_semaphore_create(size_t, ptr_t);
syscall kern_semaphore_down(handle_t, nstime_t);
syscall kern_semaphore_up(handle_t, size_t);

#syscall kern_area_create(size_t, handle_t, offset_t, object_rights_t, ptr_t);
#syscall kern_area_open(area_id_t, object_rights_t, ptr_t);
#syscall kern_area_id(handle_t);
#syscall kern_area_size(handle_t);
#syscall kern_area_resize(handle_t, size_t);

syscall kern_futex_wait(ptr_t, int32_t, nstime_t);
syscall kern_futex_wake(ptr_t, size_t, ptr_t);
syscall kern_futex_requeue(ptr_t, int32_t, size_t, ptr_t, ptr_t);

syscall kern_timer_create(int, ptr_t);
syscall kern_timer_start(handle_t, nstime_t, int);
syscall kern_timer_stop(handle_t, ptr_t);

syscall kern_image_register(image_id_t, ptr_t) hidden;
syscall kern_image_unregister(image_id_t) hidden;

syscall kern_user_file_create(int, uint32_t, uint32_t, uint64_t, ptr_t, ptr_t);

syscall kern_pipe_create(uint32_t, uint32_t, ptr_t, ptr_t);

syscall kern_socket_accept(handle_t, socklen_t, ptr_t, ptr_t, ptr_t);
syscall kern_socket_bind(handle_t, ptr_t, socklen_t);
syscall kern_socket_connect(handle_t, ptr_t, socklen_t);
syscall kern_socket_getpeername(handle_t, socklen_t, ptr_t, ptr_t);
syscall kern_socket_getsockname(handle_t, socklen_t, ptr_t, ptr_t);
syscall kern_socket_listen(handle_t, int);
syscall kern_socket_recvfrom(handle_t, ptr_t, size_t, int, socklen_t, ptr_t, ptr_t, ptr_t);
syscall kern_socket_sendto(handle_t, ptr_t, size_t, int, ptr_t, socklen_t, ptr_t);
syscall kern_socket_getsockopt(handle_t, int, int, socklen_t, ptr_t, ptr_t);
syscall kern_socket_setsockopt(handle_t, int, int, ptr_t, socklen_t);
syscall kern_socket_shutdown(handle_t, int);
syscall kern_socket_sockatmark(handle_t, ptr_t);
syscall kern_socket_create(sa_family_t, int, int, uint32_t, ptr_t);
syscall kern_socket_create_pair(sa_family_t, int, int, uint32_t, ptr_t);

syscall kern_condition_set(handle_t, bool);
syscall kern_condition_create(ptr_t);
