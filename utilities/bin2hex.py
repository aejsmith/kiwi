#!/usr/bin/env python
#
# Copyright (C) 2009-2022 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

import sys

def usage():
    sys.stderr.write('Usage: %s [ARGS...] <binary> <variable name>\n' % (sys.argv[0]))
    sys.stderr.write('Possible arguments:\n')
    sys.stderr.write('  --no-size        - Do not create a size variable.\n')
    sys.stderr.write('  --section <name> - Section to place array in.\n')

def main(args):
    size = True
    section = None

    # Parse arguments.
    while len(args) != 0 and args[0][0:2] == '--':
        arg = args.pop(0)
        if arg == '--help':
            usage()
            return 0
        elif arg == '--no-size':
            size = False
        elif arg == '--section':
            if len(args) == 0:
                sys.stderr.write('Argument %s requires a value\n' % (arg))
                usage()
                return 1
            section = args.pop(0)
        else:
            sys.stderr.write('Unknown argument %s\n' % (arg))
            usage()
            return 1
    if len(args) != 2:
        usage()
        return 1

    # Read in the file data.
    f = open(args[0], 'rb')
    data = f.read()
    f.close()

    # Write it out.
    sys.stdout.write('/* This file is automatically generated. Changes will be overwritten. */\n\n')
    if section:
        sys.stdout.write('#ifdef __clang_analyzer__\n')
        sys.stdout.write('unsigned char %s[] = {\n' % (args[1]))
        sys.stdout.write('#else\n')
        sys.stdout.write('unsigned char %s[] __attribute__((section("%s"))) = {\n' % (args[1], section))
        sys.stdout.write('#endif\n')
    else:
        sys.stdout.write('unsigned char %s[] = {\n' % (args[1]))
    for i in range(0, len(data)):
        if not i % 8:
            if i > 0:
                sys.stdout.write('\n')
            sys.stdout.write('\t')
        # Ugh, Python 3.
        if sys.version < '3':
            sys.stdout.write('0x%02x, ' % (ord(data[i])))
        else:
            sys.stdout.write('0x%02x, ' % (data[i]))
    sys.stdout.write('\n};\n')
    if size:
        sys.stdout.write('\nunsigned int %s_size = %d;\n' % (args[1], len(data)))

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
