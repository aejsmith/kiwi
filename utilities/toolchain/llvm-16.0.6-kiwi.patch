diff -urN llvm-16.0.6.src.orig/include/llvm/TargetParser/Triple.h llvm-16.0.6.src/include/llvm/TargetParser/Triple.h
--- llvm-16.0.6.src.orig/include/llvm/TargetParser/Triple.h	2023-06-10 23:58:16.000000000 +0100
+++ llvm-16.0.6.src/include/llvm/TargetParser/Triple.h	2023-07-08 10:47:42.202449858 +0100
@@ -223,7 +223,8 @@
     WASI,       // Experimental WebAssembly OS
     Emscripten,
     ShaderModel, // DirectX ShaderModel
-    LastOSType = ShaderModel
+    Kiwi,
+    LastOSType = Kiwi
   };
   enum EnvironmentType {
     UnknownEnvironment,
@@ -584,6 +585,11 @@
     return getOS() == Triple::Win32;
   }
 
+  /// Tests whether the OS is Kiwi.
+  bool isOSKiwi() const {
+    return getOS() == Triple::Kiwi;
+  }
+
   /// Checks if the environment is MSVC.
   bool isKnownWindowsMSVCEnvironment() const {
     return isOSWindows() && getEnvironment() == Triple::MSVC;
diff -urN llvm-16.0.6.src.orig/lib/TargetParser/Triple.cpp llvm-16.0.6.src/lib/TargetParser/Triple.cpp
--- llvm-16.0.6.src.orig/lib/TargetParser/Triple.cpp	2023-06-10 23:58:16.000000000 +0100
+++ llvm-16.0.6.src/lib/TargetParser/Triple.cpp	2023-07-08 10:48:16.047447362 +0100
@@ -243,6 +243,7 @@
   case Win32: return "windows";
   case ZOS: return "zos";
   case ShaderModel: return "shadermodel";
+  case Kiwi: return "kiwi";
   }
 
   llvm_unreachable("Invalid OSType");
@@ -596,6 +597,7 @@
     .StartsWith("wasi", Triple::WASI)
     .StartsWith("emscripten", Triple::Emscripten)
     .StartsWith("shadermodel", Triple::ShaderModel)
+    .StartsWith("kiwi", Triple::Kiwi)
     .Default(Triple::UnknownOS);
 }
 
diff -urN llvm-16.0.6.src.orig/tools/clang/lib/Basic/Targets/OSTargets.h llvm-16.0.6.src/tools/clang/lib/Basic/Targets/OSTargets.h
--- llvm-16.0.6.src.orig/tools/clang/lib/Basic/Targets/OSTargets.h	2023-06-10 23:58:16.000000000 +0100
+++ llvm-16.0.6.src/tools/clang/lib/Basic/Targets/OSTargets.h	2023-07-08 10:45:55.102457758 +0100
@@ -318,6 +318,22 @@
   }
 };
 
+// Kiwi Target
+template <typename Target>
+class LLVM_LIBRARY_VISIBILITY KiwiTargetInfo : public OSTargetInfo<Target> {
+protected:
+  void getOSDefines(const LangOptions &Opts, const llvm::Triple &Triple,
+                    MacroBuilder &Builder) const override {
+    Builder.defineMacro("__Kiwi__");
+    Builder.defineMacro("__ELF__");
+    DefineStd(Builder, "unix", Opts);
+  }
+
+public:
+  KiwiTargetInfo(const llvm::Triple &Triple, const TargetOptions &Opts)
+      : OSTargetInfo<Target>(Triple, Opts) {}
+};
+
 // Hurd target
 template <typename Target>
 class LLVM_LIBRARY_VISIBILITY HurdTargetInfo : public OSTargetInfo<Target> {
diff -urN llvm-16.0.6.src.orig/tools/clang/lib/Basic/Targets.cpp llvm-16.0.6.src/tools/clang/lib/Basic/Targets.cpp
--- llvm-16.0.6.src.orig/tools/clang/lib/Basic/Targets.cpp	2023-06-10 23:58:16.000000000 +0100
+++ llvm-16.0.6.src/tools/clang/lib/Basic/Targets.cpp	2023-07-08 10:45:55.102457758 +0100
@@ -147,6 +147,8 @@
       return new FreeBSDTargetInfo<AArch64leTargetInfo>(Triple, Opts);
     case llvm::Triple::Fuchsia:
       return new FuchsiaTargetInfo<AArch64leTargetInfo>(Triple, Opts);
+    case llvm::Triple::Kiwi:
+      return new KiwiTargetInfo<AArch64leTargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<AArch64leTargetInfo>(Triple, Opts);
     case llvm::Triple::NetBSD:
@@ -171,6 +173,8 @@
       return new FreeBSDTargetInfo<AArch64beTargetInfo>(Triple, Opts);
     case llvm::Triple::Fuchsia:
       return new FuchsiaTargetInfo<AArch64beTargetInfo>(Triple, Opts);
+    case llvm::Triple::Kiwi:
+      return new KiwiTargetInfo<AArch64beTargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<AArch64beTargetInfo>(Triple, Opts);
     case llvm::Triple::NetBSD:
@@ -187,6 +191,8 @@
     switch (os) {
     case llvm::Triple::CloudABI:
       return new CloudABITargetInfo<ARMleTargetInfo>(Triple, Opts);
+    case llvm::Triple::Kiwi:
+      return new KiwiTargetInfo<ARMleTargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<ARMleTargetInfo>(Triple, Opts);
     case llvm::Triple::FreeBSD:
@@ -221,6 +227,8 @@
       return new DarwinARMTargetInfo(Triple, Opts);
 
     switch (os) {
+    case llvm::Triple::Kiwi:
+      return new KiwiTargetInfo<ARMbeTargetInfo>(Triple, Opts);
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<ARMbeTargetInfo>(Triple, Opts);
     case llvm::Triple::FreeBSD:
@@ -534,6 +542,8 @@
     }
     case llvm::Triple::Haiku:
       return new HaikuX86_32TargetInfo(Triple, Opts);
+    case llvm::Triple::Kiwi:
+      return new KiwiTargetInfo<X86_32TargetInfo>(Triple, Opts);
     case llvm::Triple::RTEMS:
       return new RTEMSX86_32TargetInfo(Triple, Opts);
     case llvm::Triple::NaCl:
@@ -590,6 +600,8 @@
     }
     case llvm::Triple::Haiku:
       return new HaikuTargetInfo<X86_64TargetInfo>(Triple, Opts);
+    case llvm::Triple::Kiwi:
+      return new KiwiTargetInfo<X86_64TargetInfo>(Triple, Opts);
     case llvm::Triple::NaCl:
       return new NaClTargetInfo<X86_64TargetInfo>(Triple, Opts);
     case llvm::Triple::PS4:
diff -urN llvm-16.0.6.src.orig/tools/clang/lib/Driver/CMakeLists.txt llvm-16.0.6.src/tools/clang/lib/Driver/CMakeLists.txt
--- llvm-16.0.6.src.orig/tools/clang/lib/Driver/CMakeLists.txt	2023-06-10 23:58:16.000000000 +0100
+++ llvm-16.0.6.src/tools/clang/lib/Driver/CMakeLists.txt	2023-07-08 10:45:55.102457758 +0100
@@ -66,6 +66,7 @@
   ToolChains/Hexagon.cpp
   ToolChains/HLSL.cpp
   ToolChains/Hurd.cpp
+  ToolChains/Kiwi.cpp
   ToolChains/Linux.cpp
   ToolChains/MipsLinux.cpp
   ToolChains/MinGW.cpp
diff -urN llvm-16.0.6.src.orig/tools/clang/lib/Driver/Driver.cpp llvm-16.0.6.src/tools/clang/lib/Driver/Driver.cpp
--- llvm-16.0.6.src.orig/tools/clang/lib/Driver/Driver.cpp	2023-06-10 23:58:16.000000000 +0100
+++ llvm-16.0.6.src/tools/clang/lib/Driver/Driver.cpp	2023-07-08 10:45:55.103457758 +0100
@@ -30,6 +30,7 @@
 #include "ToolChains/Haiku.h"
 #include "ToolChains/Hexagon.h"
 #include "ToolChains/Hurd.h"
+#include "ToolChains/Kiwi.h"
 #include "ToolChains/Lanai.h"
 #include "ToolChains/Linux.h"
 #include "ToolChains/MSP430.h"
@@ -5984,6 +5985,9 @@
     case llvm::Triple::Haiku:
       TC = std::make_unique<toolchains::Haiku>(*this, Target, Args);
       break;
+    case llvm::Triple::Kiwi:
+      TC = std::make_unique<toolchains::Kiwi>(*this, Target, Args);
+      break;
     case llvm::Triple::Ananas:
       TC = std::make_unique<toolchains::Ananas>(*this, Target, Args);
       break;
diff -urN llvm-16.0.6.src.orig/tools/clang/lib/Driver/ToolChains/Gnu.cpp llvm-16.0.6.src/tools/clang/lib/Driver/ToolChains/Gnu.cpp
--- llvm-16.0.6.src.orig/tools/clang/lib/Driver/ToolChains/Gnu.cpp	2023-06-10 23:58:16.000000000 +0100
+++ llvm-16.0.6.src/tools/clang/lib/Driver/ToolChains/Gnu.cpp	2023-07-08 10:45:55.103457758 +0100
@@ -249,8 +249,12 @@
       return "elf_iamcu";
     return "elf_i386";
   case llvm::Triple::aarch64:
+    if (T.isOSKiwi())
+      return "aarch64elf";
     return "aarch64linux";
   case llvm::Triple::aarch64_be:
+    if (T.isOSKiwi())
+      return "aarch64elfb";
     return "aarch64linuxb";
   case llvm::Triple::arm:
   case llvm::Triple::thumb:
@@ -640,18 +644,23 @@
         CmdArgs.push_back("--pop-state");
       }
 
-      if (WantPthread && !isAndroid)
-        CmdArgs.push_back("-lpthread");
-
-      if (Args.hasArg(options::OPT_fsplit_stack))
-        CmdArgs.push_back("--wrap=pthread_create");
-
-      if (!Args.hasArg(options::OPT_nolibc))
-        CmdArgs.push_back("-lc");
-
-      // Add IAMCU specific libs, if needed.
-      if (IsIAMCU)
-        CmdArgs.push_back("-lgloss");
+      if (Triple.isOSKiwi()) {
+        CmdArgs.push_back("-lsystem");
+        CmdArgs.push_back("-lkernel");
+      } else {
+        if (WantPthread && !isAndroid)
+          CmdArgs.push_back("-lpthread");
+
+        if (Args.hasArg(options::OPT_fsplit_stack))
+          CmdArgs.push_back("--wrap=pthread_create");
+
+        if (!Args.hasArg(options::OPT_nolibc))
+          CmdArgs.push_back("-lc");
+
+        // Add IAMCU specific libs, if needed.
+        if (IsIAMCU)
+          CmdArgs.push_back("-lgloss");
+      }
 
       if (IsStatic || IsStaticPIE)
         CmdArgs.push_back("--end-group");
diff -urN llvm-16.0.6.src.orig/tools/clang/lib/Driver/ToolChains/Kiwi.cpp llvm-16.0.6.src/tools/clang/lib/Driver/ToolChains/Kiwi.cpp
--- llvm-16.0.6.src.orig/tools/clang/lib/Driver/ToolChains/Kiwi.cpp	1970-01-01 01:00:00.000000000 +0100
+++ llvm-16.0.6.src/tools/clang/lib/Driver/ToolChains/Kiwi.cpp	2023-07-08 10:45:55.103457758 +0100
@@ -0,0 +1,110 @@
+//===--- Kiwi.h - Kiwi ToolChain Implementations ----------------*- C++ -*-===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#include "Kiwi.h"
+#include "CommonArgs.h"
+#include "clang/Config/config.h"
+#include "clang/Driver/Distro.h"
+#include "clang/Driver/Driver.h"
+#include "clang/Driver/DriverDiagnostic.h"
+#include "clang/Driver/Options.h"
+#include "clang/Driver/SanitizerArgs.h"
+#include "llvm/Option/ArgList.h"
+#include "llvm/ProfileData/InstrProf.h"
+#include "llvm/Support/Path.h"
+#include "llvm/Support/ScopedPrinter.h"
+#include "llvm/Support/VirtualFileSystem.h"
+#include <system_error>
+
+using namespace clang::driver;
+using namespace clang::driver::toolchains;
+using namespace clang;
+using namespace llvm::opt;
+
+Kiwi::Kiwi(const Driver &D, const llvm::Triple &Triple, const ArgList &Args)
+  : Generic_ELF(D, Triple, Args) {
+  getFilePaths().push_back(getDriver().Dir + "/../lib");
+
+  // When using a sysroot, add '/lib' to allow '/system' to be omitted in the
+  // sysroot.
+  if(!getDriver().SysRoot.empty())
+    getFilePaths().push_back(getDriver().SysRoot + "/lib");
+  getFilePaths().push_back(getDriver().SysRoot + "/system/lib");
+}
+
+bool Kiwi::HasNativeLLVMSupport() const {
+  return true;
+}
+
+ToolChain::RuntimeLibType Kiwi::GetDefaultRuntimeLibType() const {
+  return ToolChain::RLT_CompilerRT;
+}
+
+ToolChain::CXXStdlibType Kiwi::GetDefaultCXXStdlibType() const {
+  return ToolChain::CST_Libcxx;
+}
+
+ToolChain::CXXStdlibType Kiwi::GetCXXStdlibType(const ArgList &Args) const {
+  if (Arg *A = Args.getLastArg(options::OPT_stdlib_EQ)) {
+    StringRef Value = A->getValue();
+    if (Value != "libc++") {
+      getDriver().Diag(diag::err_drv_invalid_stdlib_name)
+        << A->getAsString(Args);
+    }
+  } 
+
+  return ToolChain::CST_Libcxx;
+}
+
+void Kiwi::AddCXXStdlibLibArgs(const ArgList &Args,
+                               ArgStringList &CmdArgs) const {
+  CmdArgs.push_back("-lc++");
+  CmdArgs.push_back("-lcxxrt");
+}
+
+Tool *Kiwi::buildLinker() const {
+  return new tools::gnutools::Linker(*this);
+}
+
+Tool *Kiwi::buildAssembler() const {
+  return new tools::gnutools::Assembler(*this);
+}
+
+std::string Kiwi::getDynamicLinker(const ArgList &Args) const {
+  return "/system/lib/libkernel.so";
+}
+
+void Kiwi::AddClangSystemIncludeArgs(const ArgList &DriverArgs,
+                                     ArgStringList &CC1Args) const {
+  const Driver &D = getDriver();
+
+  if (DriverArgs.hasArg(options::OPT_nostdinc))
+    return;
+
+  if (!DriverArgs.hasArg(options::OPT_nobuiltininc)) {
+    SmallString<128> P(D.ResourceDir);
+    llvm::sys::path::append(P, "include");
+    addSystemInclude(DriverArgs, CC1Args, P.str());
+  }
+
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc))
+    return;
+
+  if (!D.SysRoot.empty())
+    addSystemInclude(DriverArgs, CC1Args, D.SysRoot + "/include");
+  addSystemInclude(DriverArgs, CC1Args, D.SysRoot + "/system/include");
+}
+
+void Kiwi::addLibCxxIncludePaths(const llvm::opt::ArgList &DriverArgs,
+                                 llvm::opt::ArgStringList &CC1Args) const {
+  const Driver &D = getDriver();
+
+  if (!D.SysRoot.empty())
+    addSystemInclude(DriverArgs, CC1Args, D.SysRoot + "/include/c++/v1");
+  addSystemInclude(DriverArgs, CC1Args, D.SysRoot + "/system/include/c++/v1");
+}
diff -urN llvm-16.0.6.src.orig/tools/clang/lib/Driver/ToolChains/Kiwi.h llvm-16.0.6.src/tools/clang/lib/Driver/ToolChains/Kiwi.h
--- llvm-16.0.6.src.orig/tools/clang/lib/Driver/ToolChains/Kiwi.h	1970-01-01 01:00:00.000000000 +0100
+++ llvm-16.0.6.src/tools/clang/lib/Driver/ToolChains/Kiwi.h	2023-07-08 10:45:55.104457758 +0100
@@ -0,0 +1,49 @@
+//===--- Kiwi.h - Kiwi ToolChain Implementations ----------------*- C++ -*-===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_KIWI_H
+#define LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_KIWI_H
+
+#include "Gnu.h"
+#include "clang/Driver/ToolChain.h"
+
+namespace clang {
+namespace driver {
+namespace toolchains {
+
+class LLVM_LIBRARY_VISIBILITY Kiwi : public Generic_ELF {
+public:
+  Kiwi(const Driver &D, const llvm::Triple &Triple,
+       const llvm::opt::ArgList &Args);
+
+  bool HasNativeLLVMSupport() const override;
+  RuntimeLibType GetDefaultRuntimeLibType() const override;
+  CXXStdlibType GetDefaultCXXStdlibType() const override;
+  CXXStdlibType GetCXXStdlibType(const llvm::opt::ArgList &Args) const override;
+  void AddCXXStdlibLibArgs(const llvm::opt::ArgList &Args,
+                           llvm::opt::ArgStringList &CmdArgs) const override;
+
+  std::string getDynamicLinker(const llvm::opt::ArgList &Args) const override;
+
+  void
+  AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                            llvm::opt::ArgStringList &CC1Args) const override;
+  void addLibCxxIncludePaths(
+      const llvm::opt::ArgList &DriverArgs,
+      llvm::opt::ArgStringList &CC1Args) const override;
+
+protected:
+  Tool *buildAssembler() const override;
+  Tool *buildLinker() const override;
+};
+
+} // end namespace toolchains
+} // end namespace driver
+} // end namespace clang
+
+#endif // LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_KIWI_H
diff -urN llvm-16.0.6.src.orig/tools/clang/lib/Lex/InitHeaderSearch.cpp llvm-16.0.6.src/tools/clang/lib/Lex/InitHeaderSearch.cpp
--- llvm-16.0.6.src.orig/tools/clang/lib/Lex/InitHeaderSearch.cpp	2023-06-10 23:58:16.000000000 +0100
+++ llvm-16.0.6.src/tools/clang/lib/Lex/InitHeaderSearch.cpp	2023-07-08 10:59:46.582612349 +0100
@@ -417,6 +417,7 @@
   case llvm::Triple::Linux:
   case llvm::Triple::Solaris:
   case llvm::Triple::WASI:
+  case llvm::Triple::Kiwi:
     return false;
 
   case llvm::Triple::Win32:
